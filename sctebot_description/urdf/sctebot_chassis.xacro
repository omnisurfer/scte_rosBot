<?xml version='1.0'?>
<!--
https://answers.ros.org/question/192817/error-msg-the-root-link_base-has-an-inertia-specified-in-the-urdf-but-kdl/
http://gazebosim.org/tutorials?tut=ros_urdf
https://wiki.ros.org/action/fullsearch/urdf/Tutorials/Building%20a%20Visual%20Robot%20Model%20with%20URDF%20from%20Scratch?action=fullsearch&context=180&value=linkto%3A%22urdf%2FTutorials%2FBuilding+a+Visual+Robot+Model+with+URDF+from+Scratch%22
http://wiki.ros.org/xacro

http://wiki.ros.org/urdf/Tutorials/Building%20a%20Visual%20Robot%20Model%20with%20URDF%20from%20Scratch
http://wiki.ros.org/urdf/Tutorials/Building%20a%20Movable%20Robot%20Model%20with%20URDF

http://wiki.ros.org/urdf/XML/joint#Elements

-->

<!--
    Robot model adapted from https://github.com/CIR-KIT/steer_drive_ros/blob/kinetic-devel/steer_drive_controller/test/common/urdf/steerbot.xacro

    Geometry:
    The Ackermann steering sctebot_gazebo_plugins require the longitudinal
    separation between the front and back wheel axes and the
    lateral separation between the left and right front steering axes.

    For this model:
    wheel_separation_h = base_length - 2 * axle_offset = 0.442 - (2 * 0.05) = .342
    wheel_separation_w = base_width  + 2 * axle_offset = 0.442 + (2 * 0.05) = .542

    Modified from the steer_bot example found here: https://github.com/srmainwaring/steer_bot
-->

<!--Gazebo does not seem to like capital letters in the robot namespace-->
<robot name="sctebot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:arg name="robot_namespace" default="/"/>

    <xacro:arg name="enable_mock_realsense_camera" default="True"/>
    <xacro:arg name="enable_logitech_stereo_camera" default="False"/>
    <xacro:arg name="enable_realsense_d435i_stereo_camera" default="False"/>
    <xacro:arg name="enable_ydlidar" default="True"/>

    <xacro:include filename="$(find sctebot_description)/urdf/sctebot_wheel.xacro"/>
    <xacro:include filename="$(find sctebot_description)/urdf/sctebot_inertials.xacro"/>
    <xacro:include filename="$(find sctebot_description)/urdf/sctebot_materials.xacro"/>

    <!-- sensor gazebo plugins -->
    <xacro:include filename="$(find sctebot_description)/urdf/sctebot_sensors.xacro"/>

    <!-- ackermann components and gazebo plugins -->
    <xacro:include filename="$(find sctebot_description)/urdf/plugins/sctebot_plugins.gazebo"/>

    <!-- physical components -->

    <!-- Math constants -->
    <xacro:property name="deg_to_rad" value="0.01745329251994329577"/>

    <!-- region Robot base dimensions -->
    <xacro:property name="base_length" value="0.442" /> <!-- wheel base derived from this -->
    <xacro:property name="base_width" value="0.157" /> <!-- wheel track derived from this -->
    <xacro:property name="base_height" value="0.01" />
    <xacro:property name="base_mass" value="5" />
    <!-- endregion -->

    <!-- Wheel link dimensions -->
    <xacro:property name="wheel_radius" value="0.0525" />
    <xacro:property name="wheel_thickness" value="0.048" />
    <xacro:property name="wheel_mass" value="1" />

    <!-- Steering link dimensions -->
    <xacro:property name="steer_radius" value="0.005" />
    <xacro:property name="steer_thickness" value="0.02" />
    <xacro:property name="steer_mass" value="1" />

    <!-- Axle positions -->
    <xacro:property name="axle_offset" value="0.05" />
    <xacro:property name="steer_offset" value="0.02" />

    <!-- scte dimensions -->
    <xacro:property name="scte_chassis_length_sq" value="${base_length * base_length}"/>
    <xacro:property name="scte_chassis_width_sq" value="${base_width * base_width}"/>
    <xacro:property name="scte_chassis_height_sq" value="${base_height * base_height}"/>

    <!-- base footprint for nav -->
    <link name='base_footprint'/>

    <joint name="base_link_TO_base_footprint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <parent link="base_footprint"/>
        <child link="base_link"/>
    </joint>

    <!-- Base link -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <material name="green" />
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>
    </link>

    <!-- Inertial link stores the robot's inertial information -->
    <link name="inertial_link">
        <inertial>
            <mass value="${base_mass}" />
            <origin xyz="0 0 0" />
            <inertia ixx="${(1/12 * base_mass) * (scte_chassis_height_sq + scte_chassis_width_sq)}" ixy="0" ixz="0"
                     iyy="${(1/12 * base_mass) * (scte_chassis_height_sq + scte_chassis_length_sq)}" iyz="0"
                     izz="${(1/12 * base_mass) * (scte_chassis_length_sq + scte_chassis_width_sq)}" />
        </inertial>
    </link>

    <joint name="inertial_to_base_link_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="base_link" />
        <child link="inertial_link" />
    </joint>

    <!-- region Wheels and Bumpers -->
    <!-- Front steer and rear wheel joints required for ackermann_steering_controller -->
    <xacro:front_steer
            name="front"
            parent="base"
            steer_radius="${steer_radius}"
            steer_thickness="${steer_thickness}"
            steer_mass="${steer_mass}"
            base_length="${base_length}"
            base_width="${base_width}"
            axle_offset="${axle_offset}"
            steer_height="${wheel_radius+steer_offset}">
    </xacro:front_steer>

    <xacro:rear_wheel
            name="rear"
            parent="base"
            wheel_radius="${wheel_radius/4}"
            wheel_thickness="${wheel_thickness/2}"
            wheel_mass="${wheel_mass/32}">
        <origin xyz="${-base_length/2+axle_offset} 0 0" rpy="${-90 * deg_to_rad} 0 0"/>
    </xacro:rear_wheel>

    <!-- Steerable front wheels -->
    <xacro:front_wheel_lr
            name="front_right"
            parent="base"
            reflect="-1"
            wheel_radius="${wheel_radius}"
            wheel_thickness="${wheel_thickness}"
            wheel_mass="${wheel_mass}"
            steer_radius="${steer_radius}"
            steer_thickness="${steer_thickness}"
            steer_mass="${steer_mass}"
            base_length="${base_length}"
            base_width="${base_width}"
            axle_offset="${axle_offset}"
            steer_height="${wheel_radius+steer_offset}">
    </xacro:front_wheel_lr>
    <xacro:front_wheel_lr
            name="front_left"
            parent="base"
            reflect="1"
            wheel_radius="${wheel_radius}"
            wheel_thickness="${wheel_thickness}"
            wheel_mass="${wheel_mass}"
            steer_radius="${steer_radius}"
            steer_thickness="${steer_thickness}"
            steer_mass="${steer_mass}"
            base_length="${base_length}"
            base_width="${base_width}"
            axle_offset="${axle_offset}"
            steer_height="${wheel_radius+steer_offset}">
    </xacro:front_wheel_lr>

    <!-- Rear wheels -->
    <xacro:rear_wheel_lr
            name="rear_right"
            parent="base"
            wheel_radius="${wheel_radius}"
            wheel_thickness="${wheel_thickness}"
            wheel_mass="${wheel_mass}">
        <origin xyz="${-base_length/2+axle_offset} ${-base_width/2-axle_offset} 0" rpy="${-90 * deg_to_rad} 0 0"/>
    </xacro:rear_wheel_lr>
    <xacro:rear_wheel_lr
            name="rear_left"
            parent="base"
            wheel_radius="${wheel_radius}"
            wheel_thickness="${wheel_thickness}"
            wheel_mass="${wheel_mass}">
        <origin xyz="${-base_length/2+axle_offset} ${+base_width/2+axle_offset} 0" rpy="${-90 * deg_to_rad} 0 0"/>
    </xacro:rear_wheel_lr>

    <xacro:include filename="sctebot_front_bumper.xacro"/>
    <xacro:scte_front_bumper
            link_name="front_bumper"
            parent_link="base_link"
            front_skid_plate_size="0.07 0.07 ${0.0105}"
            front_skid_plate_joint_xyz="${base_length * 0.5} 0 ${0.07 * 0.30}"
            front_skid_plate_joint_rpy="0 ${pi/-6}  0"
            front_bumper_size="0.01 0.175 0.05"
    />

    <xacro:include filename="sctebot_rear_bumper.xacro"/>
    <xacro:scte_rear_bumper
            link_name="rear_bumper"
            parent_link="base_link"
            rear_bumper_size="0.01 0.255 0.05"
            rear_bumper_mount_size="0.09 0.05 0.05"
            rear_bumper_mount_joint_xyz="${base_length * -0.6} 0 ${0.105 * 0.5}"
            rear_bumper_mount_joint_rpy="0 0 0"
    />
    <!-- endregion -->

    <!-- Sensors and Compute Hardware -->
    <xacro:property name="computer_enclosure_length" value="0.295"/>
    <xacro:property name="computer_enclosure_width" value="0.245"/>
    <xacro:property name="computer_enclosure_height" value="0.116"/>
    <xacro:include filename="$(find sctebot_description)/urdf/equipment/computer_enclosure.xacro"/>
    <xacro:computer_enclosure
            link_name="computer_enclosure"
            parent_link="base_link"
            enclosure_origin="0 0 0.174"
            enclosure_rpy="0 0 0"
            enclosure_size="${computer_enclosure_length} ${computer_enclosure_width} ${computer_enclosure_height}"
    />

    <!-- region IMU link -->
    <xacro:property name="imu_module_height" value="0.022"/>
    <link name="imu_link">
        <visual name='visual'>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="0.06 0.035 ${imu_module_height}"/>
                </geometry>
                <material name="blue"/>
        </visual>
        <collision name='collision'>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.06 0.035 ${imu_module_height}"/>
            </geometry>
        </collision>
    </link>
    <joint name="imu_link_TO_computer_enclosure" type="fixed">
        <origin xyz="0 0 ${(computer_enclosure_height - imu_module_height) * 0.5}" rpy="0 0 0"/>
        <parent link="computer_enclosure"/>
        <child link="imu_link"/>
    </joint>
    <!-- endregion -->

    <!-- region GPS link -->
    <xacro:property name="gps_module_height" value="0.022"/>
    <link name="gps_link">
        <visual name='visual'>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="0.035 0.06 ${gps_module_height}"/>
                </geometry>
                <material name="blue"/>
        </visual>
        <collision name='collision'>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.035 0.06 ${gps_module_height}"/>
            </geometry>
        </collision>
    </link>
    <joint name="gps_link_TO_computer_enclosure" type="fixed">
        <origin xyz="-0.125 0.075 ${(computer_enclosure_height + gps_module_height) * 0.5}" rpy="0 0 0"/>
        <parent link="computer_enclosure"/>
        <child link="gps_link"/>
    </joint>
    <!-- endregion -->

    <!-- region YDLIDAR link -->
    <xacro:if value="$(arg enable_ydlidar)">
        <xacro:include filename="$(find ydlidar_ros)/urdf/ydlidar.urdf"/>
        <joint name="ydlidar_base_TO_computer_enclosure" type="fixed">
            <origin xyz="0 0 ${computer_enclosure_height * 0.5}" rpy="0 0 0"/>
            <parent link="computer_enclosure"/>
            <child link="base_laser"/>
        </joint>
    </xacro:if>
    <!-- endregion -->

    <!-- region Stereo Cameras -->
    <!-- region Realsense d435i Stereo Camera -->
    <xacro:property name="realsense_camera_x_offset" value="${computer_enclosure_length * 0.5 -  0.0125}"/>
    <xacro:property name="realsense_camera_height" value="0.025"/>
    <xacro:if value="$(arg enable_realsense_d435i_stereo_camera)">
        <xacro:include filename="$(find realsense2_description)/urdf/_d435i.urdf.xacro"/>
        <xacro:sensor_d435i parent="computer_enclosure" name="realsense_d435i">
            <origin xyz="${realsense_camera_x_offset} 0 ${(computer_enclosure_height) * 0.5}" rpy="0 0 0"/>
        </xacro:sensor_d435i>
    </xacro:if>

    <!-- Gazebo mock Realsense Stereo Camera Sensor -->
    <xacro:if value="$(arg enable_mock_realsense_camera)">
        <xacro:include filename="$(find sctebot_description)/urdf/gazebo_sensors/gazebo_stereo_camera.xacro"/>
        <xacro:gazebo_stereo_camera
                parent_link="computer_enclosure"
                camera_link="gazebo_stereo_camera"
                origin_xyz="${realsense_camera_x_offset} 0 ${(computer_enclosure_height + realsense_camera_height) * 0.5}"
                origin_rpy="0.0 0.0 0.0"
        />
    </xacro:if>
    <!-- endregion -->

    <!-- region Logitech Stereo Cameras -->
    <!--
        https://answers.ros.org/question/9840/how-do-you-get-stereo_image_proc-to-include-a-frame_id-so-that-rviz-will-accept-the-point-cloud-messages/
        - stereo projection/point cloud uses the left cameras frame_id to determine how to draw the image
        may need to use image_rect for the video to align with the model
        https://berndpfrommer.github.io/tagslam_web/visualization/

        TODO drowan_20220709_BUG: The cameras are mounted incorrectly. Need to fix camera link and/or optical link...
    -->
    <xacro:property name="logitech_camera_height" value="0.025"/>
    <xacro:if value="$(arg enable_logitech_stereo_camera)">
        <xacro:include filename="$(find logitech_c270_camera)/urdf/logitech_c270.xacro"/>
        <xacro:logitech_c270_camera
                parent_link="computer_enclosure"
                camera_link="logitech_driver_side_camera"
                joint_xyz="-0.075 0.125 ${(computer_enclosure_height + logitech_camera_height) * 0.5}"
                joint_rpy="0 0 ${pi}"
        />
        <xacro:logitech_c270_camera
                parent_link="computer_enclosure"
                camera_link="logitech_passenger_side_camera"
                joint_xyz="-0.075 -0.125 ${(computer_enclosure_height + logitech_camera_height) * 0.5}"
                joint_rpy="0 0 ${pi}"
        />
    </xacro:if>
    <!-- endregion -->
    <!-- endregion -->

    <!-- Colour -->
    <gazebo reference="base_link">
        <material>Gazebo/Green</material>
    </gazebo>

</robot>